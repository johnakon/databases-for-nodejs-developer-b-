#!/usr/bin/env node

// Dependencies
const http = require('http');
const config = require('../config');
const App = require('../app');
// eslint-disable-next-line import/order
const mongoose = require('mongoose');

// to remove deprecatin warning
mongoose.set('useFindAndModify', false);
mongoose.set('useCreateIndex', true);
mongoose.set('useUnifiedTopology', true);
mongoose.set('useNewUrlParser', true);

const log = config.logger;

// set up database connection, dsn got from config folder
mongoose
  .connect(config.mongodb.dsn)
  .then(() => log.info('Successfully connected to Mongodb'))
  // eslint-disable-next-line no-console
  .catch((err) => console.error('Something went wrong', err));

/* Logic to start the application */
const app = App(config);
const port = process.env.PORT || '3000';
app.set('port', port);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port  ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.fatal(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.fatal(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

const server = http.createServer(app);
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

  log.info(`${config.applicationName} listening on ${bind}`);
}
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
